---
- name: Test Connection to Test server and Select Facts VM
  hosts: test
  become: true

  tasks:
    - name: Ping test
      ping:

    - name: Store Facts on VM
      set_fact: 
        vm_os_fam: "{{ ansible_facts['os_family'] }}"

- name: Update Packages
  hosts: test
  become: true
  gather_facts: false

  tasks:
    - name: Execute Update unix Packages 'Debian/Ubuntu'
      apt:
        name: upgrade
        state: latest
      when: vm_os_fam == 'Debian' or
            vm_os_fam == 'Ubuntu'

    - name: Execute update unix Packages for 'RedHat'
      yum:
        name: '*'
        state: latest
      when: vm_os_fam == 'RedHat'

- name: Install unix SDK
  hosts: test
  become: true
  gather_facts: false

  tasks:
    - name: Install Repos for 'Debian/Ubuntu'
      apt:
        name: epel-release
      when: vm_os_fam == 'Debian' or
            vm_os_fam == 'Ubuntu'

    - name: Install Repos for 'RedHat'
      yum:
        name: epel-release
      when: vm_os_fam == 'RedHat'
    
    - name: Install utils/unix-apps for 'Debian/Ubuntu' 
      apt:
        name:
          - mc
          - lsof
          - htop
          - vim
          - python3
          - curl
          - wget
          - telnet
          - mlocate
        state: latest
      when: vm_os_fam == 'Debian' or
            vm_os_fam == 'Ubuntu'
      register: results

    - name: Install utils/unix-apps for 'RedHat'
      yum:
        name:
          - mc
          - lsof
          - htop
          - vim
          - python3
          - curl
          - wget
          - telnet
          - mlocate
        state: latest
      when: vm_os_fam == 'RedHat'
      register: results
        
    - name: Print result "Install utils/unix-apps"
      debug:
        var: results
        verbosity: 4
      when: results is changed

    - name: Install Py Module's
      pip:
        name: 
          - packaging
          - setuptools
          - virtualenv
        state: latest
      register: results

    - name: Print result "Install Py Module's"
      debug:
        var: results
        verbosity: 4
      when: results is changed

    - name: Execute cmd updatedb
      shell: updatedb    

- name: Installation and Global Configuration of the Git config
  hosts: test
  become: true
  gather_facts: false
  vars_files:
    - env.yml
    - credentials.yml

  tasks:
    - name: Install Git for 'Debian/Ubuntu'
      apt:
        name: git
        state: latest
      when: vm_os_fam == 'Debian' or
            vm_os_fam == 'Ubuntu'

    - name: Install Git for 'RedHat'
      yum:
        name: git
        state: latest
      when: vm_os_fam == 'RedHat'

    - name: Global Configuration for Git
      git_config:
        name: alias.ci
        scope: global

    - name: Read SSH key from file on the remote host
      slurp:
        src: "{{ path_key }}"
      register: ssh_key_content

    - name: Decode SSH key Content
      set_fact:
        ssh_key: "{{ ssh_key_content['content'] | b64decode }}"

    - name: Remove User Posfix from SSH Key
      set_fact:
        clean_ssh_key: "{{ ssh_key.split(' ', 1)[0] + ' ' + ssh_key.split(' ', 2)[1] }}"

    - name: Check SSH Key to GitHub
      uri:
        url: '{{ github_url }}'
        method: GET
        body_format: json
        headers:
          Authorization: "token {{ github_token }}"
      register: deployed_keys

    - name: Check if the Key is already in use
      set_fact:
        key_exists: false

    - name: Check each Key in the list
      set_fact:
        key_exists: true
      loop: '{{ deployed_keys.json }}'
      when: clean_ssh_key in item.key

    - name: Add SSH Key to GitHub
      uri:
        url: '{{ github_url }}'
        method: POST
        body_format: json
        headers:
          Authorization: "token {{ github_token }}"
        body:
          title: '{{ title_key }}'
          key: '{{ ssh_key }}'
        status_code: 201
      when: not key_exists
      register: results
        
    - name: Print result "Add ssh Key to GitHub"
      debug:
        var: results
        verbosity: 4
      when: results is changed

- name: Install Containering SDK 
  hosts: test
  become: true
  gather_facts: false

  tasks:
    - name: Install Docker for 'Debian/Ubuntu'
      apt:
        name: docker
        state: latest
      when: vm_os_fam == 'Debian' or
            vm_os_fam == 'Ubuntu'

    - name: Install Docker for 'RedHat'
      yum:
        name: docker
        state: latest
      when: vm_os_fam == 'RedHat'

    - name: Install Docker Module for Python
      pip: 
        name: docker
        state: latest

    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

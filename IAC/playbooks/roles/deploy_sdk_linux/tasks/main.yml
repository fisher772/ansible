---
# tasks file for deploy_sdk_linux
- name: Ping test
  ping:

- name: Store Facts of VM
  set_fact:
    vm_os_fam: "{{ ansible_facts['os_family'] }}"

- name: Execute Install Py Modules
  pip:
    name: '{{ py_modules }}'
    state: latest

#####Block for Debian/Ubuntu#####
- block:
    - name: Execute Update unix Packages 'Debian/Ubuntu'
      apt:
        name: upgrade
        state: latest

    - name: Install utils/unix-packages for 'Debian/Ubuntu'
      apt:
        name: '{{ packages }}'
        state: latest
  when: vm_os_fam == 'Debian' or
        vm_os_fam == 'Ubuntu'

#####Block for RedHat#####
- block:
    - name: Execute Update unix Packages 'RedHat'
      yum:
        name: '*'
        state: latest

    - name: Install utils/unix-apps for 'RedHat'
      yum:
        name: '{{ packages }}'
        state: latest
  when: vm_os_fam == 'RedHat'

- name: Check services Status and Daemon
  shell: systemctl status docker && systemctl is-enabled docker
  register: services_status
  ignore_errors: true

- name: Execute cmd updatedb
  shell: updatedb

- name: Start and Enable Docker service
  service:
    name: docker
    state: started
    enabled: true
  when: services_status.rc != 0

- name: Set Global Configurations for Git
  git_config:
    name: '{{ item.name }}'
    value: '{{ item.value }}'
    scope: global
  loop: '{{ git_cfg }}'
  no_log: true

- name: Read SSH key from file on the remote host
  slurp:
    src: "{{ path_key }}"
  register: ssh_key_content

- name: Decode SSH key Content
  set_fact:
    ssh_key: "{{ ssh_key_content['content'] | b64decode }}"

- name: Remove User Posfix from SSH Key
  set_fact:
    clean_ssh_key: "{{ ssh_key.split(' ', 1)[0] + ' ' + ssh_key.split(' ', 2)[1] }}"

- name: Check SSH Key to GitHub
  uri:
    url: '{{ github_url }}'
    method: GET
    body_format: json
    headers:
      Authorization: "token {{ github_token }}"
  register: deployed_keys

- name: Check if the Key is already in use
  set_fact:
    key_exists: false

- name: Check each Key in the list
  set_fact:
    key_exists: true
  loop: '{{ deployed_keys.json }}'
  when: clean_ssh_key in item.key
  no_log: true

- name: Add SSH Key to GitHub
  uri:
    url: '{{ github_url }}'
    method: POST
    body_format: json
    headers:
      Authorization: "token {{ github_token }}"
    body:
      title: '{{ title_key }}'
      key: '{{ ssh_key }}'
    status_code: 201
  when: not key_exists
---
# tasks file for deploy_sdk_linux
- name: Ping test
  ping:

- name: Generate vars in a file for their use in a Scenario
  script: gen_vers_distribs.py
  delegate_to: localhost
  args:
    executable: "{{ local_py_interpreter }}"

- name: Include path file vars
  include_vars:
    file: "{{ git_vars_path }}"

- name: Add and Insert Data vars in vars_distribs.yml for Scenario
  include_vars:
    file: "{{ dest_path }}"

- name: Set Docker Repo URL from Template
  set_fact:
    docker_repo_url: "{{ lookup('template', 'docker_repo_url.j2') | trim }}"
  delegate_to: localhost

- name: Set Docker GPG key URL from Template
  set_fact:
    docker_gpg_url: "{{ lookup('template', 'docker_gpg_url.j2') | trim }}"
  delegate_to: localhost

#####Block for Debian/Ubuntu#####
- block:
    - name: Execute Upgrade unix Packages 'Debian/Ubuntu'
      apt:
        upgrade: true
        update_cache: true
        state: latest

    - name: Install utils/unix-packages for 'Debian/Ubuntu'
      apt:
        name: "{{ packages + ['plocate'] }}"
        state: latest

    - name: Add Docker GPG key
      apt_key:
        url: "{{ docker_gpg_url }}"
        state: present
        validate_certs: true

    - name: Add Docker Repository
      apt_repository:
        repo: "deb [arch=amd64] {{ docker_repo_url }} stable main"
        state: present

    - name: Install SDK services for 'Debian/Ubuntu'
      apt:
        name: "{{ services }}"
        state: latest
      register: services_results
  when: vm_os_fam == "Debian"
     or vm_os_fam == "Ubuntu"

#####Block for RedHat#####
- block:
    - name: Execute Update unix Packages 'RedHat'
      yum:
        name: '*'
        state: latest
        update_cache: true

    - name: Install utils/unix-packages for 'RedHat'
      yum:
        name: "{{ packages + ['yum-utils'] + ['epel-release'] + ['mlocate'] }}"
        state: latest

    - name: Add a Docker Repository
      yum_repository:
        name: docker-ce-stable
        description: Docker CE Stable
        baseurl: "{{ docker_repo_url }}"
        gpgcheck: true
        enabled: true
        gpgkey: "{{ docker_gpg_url }}"

    - name: Install SDK services for 'RedHat'
      yum:
        name: "{{ services }}"
        state: latest
      register: services_results
  when: vm_os_fam == "RedHat"

- name: Execute Install Py Modules
  pip:
    name: "{{ py_modules }}"
    state: latest
    extra_args: "--break-system-packages"

- name: Execute cmd updatedb
  shell: updatedb

- name: Check if docker-ce was Installed or Updated
  set_fact:
    docker_installed_or_updated: "{{ services_results.changed }}"

- name: Add ansible user to Docker group
  user:
    name: "{{ docker_user }}"
    password: "{{ docker_pw }}"
    generate_ssh_key: true
    ssh_key_type: ed25519
    ssh_key_file: .ssh/id_ed25519
    groups: docker
  no_log: true
  notify:
    - Add a Docker mirrors
    - Start and Enable services

- name: Check the Status in the Docker Containers
  shell: docker ps -q
  register: containers_status
  when: docker_installed_or_updated is true
  notify:
    - Stop the Up Docker Containers
    - Start and Enable services
    - Start Docker Containers
  become: false
  become_user: "{{ docker_user }}"

#####Block for configure Git and GitHub#####
- block:
    - name: Set Global Configurations for Git
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop: "{{ git_cfg }}"
      no_log: true
      when: git_cfg_status is true

    - name: Read SSH key from file on the remote host
      slurp:
        src: "{{ path_key }}"
      register: ssh_key_content

    - name: Decode SSH key Content
      set_fact:
        ssh_key: "{{ ssh_key_content['content'] | b64decode }}"

    - name: Remove User Posfix from SSH Key
      set_fact:
        clean_ssh_key: "{{ ssh_key.split(' ', 1)[0] + ' ' + ssh_key.split(' ', 2)[1] }}"

    - name: Check SSH Key to GitHub
      uri:
        url: "{{ github_url }}"
        method: GET
        body_format: json
        headers:
          Authorization: "token {{ github_token }}"
      register: deployed_keys

    - name: Check if the Key is already in use
      set_fact:
        key_exists: false

    - name: Check each Key in the list
      set_fact:
        key_exists: true
      loop: "{{ deployed_keys.json }}"
      when: clean_ssh_key in item.key
      no_log: true

    - name: Add SSH Key to GitHub
      uri:
        url: "{{ github_url }}"
        method: POST
        body_format: json
        headers:
          Authorization: "token {{ github_token }}"
        body:
          title: "{{ title_key }}"
          key: "{{ ssh_key }}"
        status_code: 201
      no_log: true
      when: not key_exists
  when: git_status is true

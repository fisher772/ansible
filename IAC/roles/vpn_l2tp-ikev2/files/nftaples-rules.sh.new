#!/bin/bash

. /tmp/vpn_sh/vars

conf_bk() { /bin/cp -f "$1" "$1.old-$SYS_DT" 2>/dev/null; }

check_os() {
  if command -v lsb_release &> /dev/null; then
    os_type=$(lsb_release -si 2>/dev/null)
  else
    if [ -f /etc/redhat-release ]; then
      os_type=RedHat
    fi
  fi
}

check_nftables() {
  if [ -x /usr/sbin/nft ] && nft list ruleset >/dev/null 2>&1; then
    exiterr "NFTables check failed. Reboot and re-run this script."
  fi
}

update_nftables() {
  systemctl stop fail2ban >/dev/null 2>&1
    if ! grep -qs "fisher VPN script" /etc/nftables.conf; then
      cat >> /etc/nftables.conf <<'EOF'
# Added by fisher VPN script
table ip filter {
        chain FORWARD {
                type filter hook forward priority filter; policy accept;
                ip daddr "$VPN_ROUTE_RANGE"  counter packets 0 bytes 0 accept
                ip saddr "$VPN_ROUTE_RANGE"  counter packets 0 bytes 0 accept
                iifname "ppp*" oifname "eth0" counter packets 0 bytes 0 accept
                iifname "eth0" oifname "ppp*" ct state related,established counter packets 0 bytes 0 accept
                ct state invalid counter packets 0 bytes 0 drop
                iifname "ppp*" oifname "ppp*" counter packets 0 bytes 0 accept
                counter packets 0 bytes 0 drop
        }

        chain INPUT {
                type filter hook input priority filter; policy accept;
                ct state invalid counter packets 0 bytes 0 drop
                meta l4proto udp udp dport 1701 meta secpath exists counter packets 0 bytes 0 accept
                meta l4proto udp udp dport { 500,4500} counter packets 0 bytes 0 accept
                ct state related,established counter packets 35 bytes 2228 accept
        }
}
table ip nat {
        chain POSTROUTING {
                type nat hook postrouting priority srcnat; policy accept;
                oifname "eth0" ip saddr "$VPN_ROUTE_RANGE" counter packets 0 bytes 0 masquerade
                oifname "eth0" ip saddr "$VPN_ROUTE_RANGE" counter packets 0 bytes 0 accept
        }
}
table ip mangle {
        chain FORWARD {
                type filter hook forward priority mangle; policy accept;
                oifname "eth0" meta l4proto tcp ip saddr "$VPN_ROUTE_RANGE" tcp flags & (syn|rst) == syn # tcpmss match 1361:1536 counter packets 0 bytes 0 tcp option maxseg size set 1360
        }
}
EOF
fi
}

reboot_service() {
  if [ "$os_type" = RedHat ]; then
    for svc in nftables fail2ban strongswan-starter xl2tpd; do
      systemctl restart "$svc" 2>/dev/null
    done
  else
    for svc in nftables fail2ban strongswan xl2tpd; do
      systemctl restart "$svc" 2>/dev/null
    done
  fi
}

setup() {
  check_os
  conf_bk
  check_nftables
  update_nftables
  reboot_service
}

setup "$@"

exit 0
